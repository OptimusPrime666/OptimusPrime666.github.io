{"meta":{"title":"Me Blog","subtitle":"Valar Morghulis Valar Dohaeris","description":null,"author":"TwoDog Targaryen","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2019-03-19T12:04:12.000Z","updated":"2019-03-20T01:10:39.840Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-20T01:45:14.582Z","updated":"2019-03-20T01:45:14.522Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"语义化","slug":"语义化","date":"2019-03-20T09:04:37.000Z","updated":"2019-03-20T10:39:54.361Z","comments":true,"path":"2019/03/20/语义化/","link":"","permalink":"http://yoursite.com/2019/03/20/语义化/","excerpt":"","text":"理解HTML语义化1、什么是HTML语义化？ &lt;基本上都是围绕着几个主要的标签，像标题（H1~H6）、列表（li）、强调（strong em）等等&gt; 根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。 2、为什么要语义化？ 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。3、写HTML代码时应注意什么？ 尽可能少的使用无语义的标签div和span；在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；不要使用纯样式标签，如：b、font、u等，改用css设置。需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；表单域要用fieldset标签包起来，并用legend标签说明表单的用途；每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。 4、HTML5新增了header、footer、hgroup、nav、aside、section、article等标签","categories":[],"tags":[]},{"title":"slice","slug":"slice","date":"2019-03-19T11:55:23.000Z","updated":"2019-03-20T08:28:26.969Z","comments":true,"path":"2019/03/19/slice/","link":"","permalink":"http://yoursite.com/2019/03/19/slice/","excerpt":"数组方法slice的封装","text":"数组方法slice的封装 这种封装的还有会有不能正常判断的几种条件，欢迎修改123456789101112131415161718192021222324252627282930Array.prototype.mySlice = function(start,end)&#123; if(typeof start!== Number&amp;&amp;typeof end!== Number)&#123; return this; &#125; let newarr = []; if(arguments[0]&amp;&amp;!arguments[1]&amp;&amp;arguments[1]!==0)&#123; if(arguments[0]&gt;0)&#123; for (var i = start; i &lt; this.length; i++) &#123; newarr.myPush(this[i]) &#125; &#125;else if(arguments[0]&lt;0)&#123; for (var i = this.length+start; i &lt; this.length; i++) &#123; newarr.myPush(this[i]); &#125; &#125; &#125;else if(arguments[1])&#123; if(start&lt;0)&#123; return [] &#125;else if(end&lt;0)&#123; for (var i = start; i &lt; this.length+end; i++) &#123; newarr.myPush(this[i]) &#125; &#125;else&#123; for (var i = start; i &lt; end; i++) &#123; newarr.myPush(this[i]) &#125; &#125; &#125; return newarr; &#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-19T00:48:55.584Z","updated":"2019-03-19T12:10:16.967Z","comments":true,"path":"2019/03/19/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"ReactPrinciple","slug":"ReactPrinciple","date":"2018-03-20T03:00:34.000Z","updated":"2019-03-20T08:32:28.804Z","comments":true,"path":"2018/03/20/ReactPrinciple/","link":"","permalink":"http://yoursite.com/2018/03/20/ReactPrinciple/","excerpt":"","text":"##React的底层原理 React 核心技术 —— 虚拟DOM（Virtual DOM） 在前端开发的过程中，我们经常会做的一件事就是将变化的数据实时更新到UI上，这时就需要对DOM进行更新和重新渲染，而频繁的DOM操作通常是性能瓶颈产生的原因之一，有时候我们会遇到这样一种尴尬的情况：比如有一个列表数据，当用户执行刷新操作时，Ajax会重新从后台请求数据，即使新请求的数据和上次完全相同，DOM也会被全部更新一遍并进行重新渲染，这样就产生了不必要的性能开销。 React为此引入了虚拟DOM（Virtual DOM）机制：对于每一个组件，React会在内存中构建一个相对应的DOM树，基于React开发时所有的DOM构造都是通过虚拟DOM进行，每当组件的状态发生变化时，React都会重新构建整个DOM数据，然后将当前的整个DOM树和上一次的DOM树进行对比，得出DOM结构变化的部分(Patchs)，然后将这些Patchs 再更新到真实DOM中。整个过程都是在内存中进行，因此是非常高效的。借用一张图可以清晰的表示虚拟DOM的工作机制： 这是图片","categories":[],"tags":[]},{"title":"VuePrinciple","slug":"VuePrinciple","date":"2018-03-20T02:37:52.000Z","updated":"2019-03-20T08:32:20.519Z","comments":true,"path":"2018/03/20/VuePrinciple/","link":"","permalink":"http://yoursite.com/2018/03/20/VuePrinciple/","excerpt":"##Vue的底层原理","text":"##Vue的底层原理VUE实现数据双向绑定的效果，需要三大模块1、Observer：能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者 2、Compile：对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数 3、Watcher：作为链接Observer和Compile的桥梁，能够订阅并受到每个属性变动的通知，并执行指令绑定的相应回掉函数，从而更新视图 未完待续…","categories":[],"tags":[]}]}