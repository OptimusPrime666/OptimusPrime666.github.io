<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Me Blog</title>
  
  <subtitle>Valar Morghulis Valar Dohaeris</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T12:31:08.898Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TwoDog Targaryen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令和用法</title>
    <link href="http://yoursite.com/2019/03/25/git%E5%91%BD%E4%BB%A4%E5%92%8C%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/25/git命令和用法/</id>
    <published>2019-03-25T04:02:03.000Z</published>
    <updated>2019-03-27T12:31:08.898Z</updated>
    
    <content type="html"><![CDATA[<p>一、安装git<br>    在Windows系统上使用git，可以从git官网直接下载安装程序，然后按默认选项安装即可。安装完成后，在桌面右击，会有Git Bash，就说明安装成功了。</p><pre><code>安装完成后，需要设置用户名和邮箱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">'your name'</span></span><br><span class="line">$ git config --global user.email <span class="string">'your email'</span></span><br></pre></td></tr></table></figure></code></pre><p>二、创建版本库<br>    版本库又叫做仓库或者repository，可以理解为一个目录，里面所有的东西都被git管理起来了，方便查看和还原以前的内容    </p><pre><code>首先先建立一个新目录，通过cmd进入终端，输入git init，将这个文件夹变成git可以管理的仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>做完这些你就会发现，目录里多了一个.git文件，这样就创建成功了</code></pre><p>三、把文件添加到版本库<br>    首先建立一个index.html(什么名字都可以)，这个文件的位置必须在.git这个文件夹的根目录下<br>    第一步：用命令 git add 把文件添加到仓库<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add index.html</span><br></pre></td></tr></table></figure></p><pre><code>如果没有任何消息，就是添加成功了第二步：用命令 git commit 把文件提交到仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'这是我的第一天学习git'</span></span><br><span class="line">[master (root-commit) 5fb4e8a] 这是我的第一天学习git</span><br><span class="line"> 1 file changed, 10 insertions(+)</span><br><span class="line"> create mode 100644 index.html</span><br></pre></td></tr></table></figure>在这句话后面还可以跟上你这次提交的说明，可以写中文，在完成之后，可以看到有1个文件被改动，插入了10行内容。另外分两次使用可以使用 git add 多次添加文件，使用 git commit 一次性提交</code></pre><p>四、版本查看与回退<br>    可以使用 vim 文件名 进入文件的命令模式，之后输入字母i可以进入编辑模式。编辑完成之后按下ESC键退出编辑模式，输入zz或者:wq保存并退出vim。如果只想保存文件，则输入:w，回车后底行会提示写入操作结果，并保持停留在命令模式。<br>    在命令模式下输入:q!退出vim并放弃修改。放弃修改并且不退出vim模式请输入:e!，将回退到最近一次修改之后的命令模式</p><pre><code>修改之后输入 git status 命令查看结果，git status 可以让我们实时掌握自己git仓库的状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>这里的输出告诉我们，虽然index.html被修改了，但是修改之后的内容还没有进行提交现在可以输入 git diff 去查看我们到底该了那些内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git diff index.html</span><br><span class="line">diff --git a/index.html b/index.html</span><br><span class="line">index 5604b48..98782b0 100644</span><br><span class="line">--- a/index.html</span><br><span class="line">+++ b/index.html</span><br><span class="line">@@ -6,5 +6,6 @@</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">        &lt;div&gt;这是我开始学习git的第一天&lt;/div&gt;</span><br><span class="line">+       &lt;div这是我第一次在命令行修改文件&gt;&lt;/div&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">-&lt;/html&gt;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+&lt;/html&gt;</span><br></pre></td></tr></table></figure>在左边是+的就是添加的，是-的就是删除的现在我们再次用 git add 进行添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add index.html</span><br><span class="line">``` </span><br><span class="line">提交完成之后用 git status 去查看一下</span><br><span class="line">```bash</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line"> (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">       modified:   index.html</span><br></pre></td></tr></table></figure>同样是没有输出，再次用 git commit -m去进行提交<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'这次我添加了一个div'</span></span><br><span class="line">[master c1bf1c2] 这次我添加了一个div</span><br><span class="line">1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>现在可以看到提交成功，再次用 git status 查看<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>这就是git中终端修改文件并再次提交的过程git log 可以看到最近到最远的提交日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit c1bf1c20bd1c6e375fb4037aaf88116368da7e8f (HEAD -&gt; master)</span><br><span class="line">Author: OptimusPrime666 &lt;136977433@qq.com&gt;</span><br><span class="line">Date:   Mon Mar 25 15:48:54 2019 +0800</span><br><span class="line"></span><br><span class="line">    这次我添加了一个div</span><br><span class="line"></span><br><span class="line">commit 5fb4e8aaa8ad09111a6ada138535c46780847058</span><br><span class="line">Author: OptimusPrime666 &lt;136977433@qq.com&gt;</span><br><span class="line">Date:   Mon Mar 25 14:01:06 2019 +0800</span><br><span class="line"></span><br><span class="line">    这是我的第一天学习git</span><br></pre></td></tr></table></figure>可以看到我提交了两次。如果看起来太过冗余，可以加上 --pretty=oneline<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">c1bf1c20bd1c6e375fb4037aaf88116368da7e8f (HEAD -&gt; master) 这次我添加了一个div</span><br><span class="line">5fb4e8aaa8ad09111a6ada138535c46780847058 这是我的第一天学习git</span><br></pre></td></tr></table></figure>这样看起来就比较舒服了。现在我们看到有两个版本，我现在打算回退到第一个版本，使用 git reset --hard HEAD^ ，这里说一下，HEAD是当前版本，加一个 ^ 是回退到上一个版本，回退两个的话就加两个，如果想要回退的版本太多的话就写成 git reset --hard HEAD~100 这样也是可以的     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at 5fb4e8a 这是我的第一天学习git</span><br></pre></td></tr></table></figure>现在回退成功，可以用 cat index.html 查看是不是回退成功了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div&gt;这是我开始学习git的第一天&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>可以看到 &lt;div&gt;这次我添加了一个div&lt;/div&gt; 这个已经没了，回退成功！！但是现在我有发现这个版本有问题，不想用了，我想回到我未来的那个版本，怎么办？知道没有吧命令行的窗口关掉，你就可以去上面看那个 git log --pretty=oneline 命令行输出的东西，有你的版本号，可以选取前面的几位数来进行回退，但是也别太少，那样容易找到多个版本以至于混淆。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard c1bf1c20</span><br><span class="line">HEAD is now at c1bf1c2 这次我添加了一个div</span><br></pre></td></tr></table></figure>执行之后可以看看是否成功了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div&gt;这是我开始学习git的第一天&lt;/div&gt;</span><br><span class="line">        &lt;div这是我第一次在命令行修改文件&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>可以看到回退成功，那个 &lt;div&gt;这是我第一次在命令行修改文件&lt;/div&gt;又回来了。如果版本回退之后不小心把命令行关了也没事，因为让版本回到之前需要就是 commit id 可以用 git reflog 来查看你的每一条命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">c1bf1c2 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to c1bf1c20</span><br><span class="line">5fb4e8a HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">c1bf1c2 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 这次我添加了一个div</span><br><span class="line">5fb4e8a HEAD@&#123;3&#125;: commit (initial): 这是我的第一天学习git</span><br></pre></td></tr></table></figure>这就是操作了多少次，可以利用 commit id 来进行版本的回到未来。</code></pre><p>五、工作区和暂存区<br>    工作区（Working Directory）<br>        工作区就是电脑里面能看到的目录，比如我的index.html文件等等。<br>    版本库（Repository）<br>        工作区有一个隐藏着的文件夹 .git 这个就是版本库，如果不做这个文件夹的属性的话，它是看不到的。<br>        把文件向版本库提交的时候有两步：1.使用 git add 把文件提交到暂存区。2.使用 git commit 把暂存区的内run提交到当前分支。<br>        当我们创建git版本库的时候，git自动创建了一条分支master，git commit 就是提交到master分支上，可以理解为把修改完成并且需要提交的内容全部放在暂存区，然后一次性提交到版本库</p><pre><code>咱们现在做一个实验，对文件进行第一次修改 -&gt; git add -&gt;对文件进行第二次修改 -&gt; git commit ，这样可以看出第一次修改之后胡放入暂存区，第二次修改并没有放入暂存区，所以 git commit 仅仅是对第一次的修改进行的提交<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ vim index.html</span><br><span class="line"></span><br><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ git add index.html</span><br><span class="line"></span><br><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ vim index.html</span><br><span class="line"></span><br><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ git commit -m <span class="string">'这是我第二天学习git'</span></span><br><span class="line">[master 555f4a9] 这是我第二天学习git</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>这样看就比较明显了，我再次 git status 的时候发现第二次修改并没有被提交，原因就是上面说的那些。</code></pre><p>六、撤销修改<br>        如果发现自己在提交过程中发现有错误，需要撤销，使用 git checkout – 文件名 可以撤销修改，这条指令有两个作用：一种是 index.html 自从修改之后没有被提交到暂存区，使用这条指令之后就回到和原来版本库一样。一种是已经添加到暂存区，而且有做了修改，使用这条命令就会让 index.html 回到添加到暂存区的状态<br>        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   index.html</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line"></span><br><span class="line">GDS@LAPTOP-QTJCSB7S MINGW64 ~/Desktop/git (master)</span><br><span class="line">$ git checkout -- index.html</span><br></pre></td></tr></table></figure></p><pre><code>这时候再去 git status 就会发现所做的修改消失了，内容还原了。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、安装git&lt;br&gt;    在Windows系统上使用git，可以从git官网直接下载安装程序，然后按默认选项安装即可。安装完成后，在桌面右击，会有Git Bash，就说明安装成功了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;安装完成后，需要设置用户名和邮箱
&lt;figure cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>语义化</title>
    <link href="http://yoursite.com/2019/03/20/%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/20/语义化/</id>
    <published>2019-03-20T09:04:37.000Z</published>
    <updated>2019-03-20T10:39:54.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解HTML语义化"><a href="#理解HTML语义化" class="headerlink" title="理解HTML语义化"></a>理解HTML语义化</h2><p>1、什么是HTML语义化？</p><p>&lt;基本上都是围绕着几个主要的标签，像标题（H1~H6）、列表（li）、强调（strong em）等等&gt;</p><p>　　根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。</p><p>2、为什么要语义化？</p><p>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看；<br>用户体验：例如title、alt用于解释名词或解释图片信息、label标签的活用；<br>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；<br>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；<br>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。<br>3、写HTML代码时应注意什么？</p><p>尽可能少的使用无语义的标签div和span；<br>在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；<br>不要使用纯样式标签，如：b、font、u等，改用css设置。<br>需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；<br>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；<br>表单域要用fieldset标签包起来，并用legend标签说明表单的用途；<br>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。<br> 4、HTML5新增了header、footer、hgroup、nav、aside、section、article等标签</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理解HTML语义化&quot;&gt;&lt;a href=&quot;#理解HTML语义化&quot; class=&quot;headerlink&quot; title=&quot;理解HTML语义化&quot;&gt;&lt;/a&gt;理解HTML语义化&lt;/h2&gt;&lt;p&gt;1、什么是HTML语义化？&lt;/p&gt;
&lt;p&gt;&amp;lt;基本上都是围绕着几个主要的标签，像
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>slice</title>
    <link href="http://yoursite.com/2019/03/19/slice/"/>
    <id>http://yoursite.com/2019/03/19/slice/</id>
    <published>2019-03-19T11:55:23.000Z</published>
    <updated>2019-03-21T04:02:28.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组方法slice的封装"><a href="#数组方法slice的封装" class="headerlink" title="数组方法slice的封装"></a>数组方法slice的封装</h2><a id="more"></a><p>这种封装的还有会有不能正常判断的几种条件，欢迎修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.mySlice = <span class="keyword">function</span>(start,end)&#123;</span><br><span class="line"><span class="keyword">if</span>(typeof start!== Number&amp;&amp;typeof end!== Number)&#123;</span><br><span class="line"><span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> newarr = [];</span><br><span class="line"><span class="keyword">if</span>(arguments[0]&amp;&amp;!arguments[1]&amp;&amp;arguments[1]!==0)&#123;</span><br><span class="line"><span class="keyword">if</span>(arguments[0]&gt;0)&#123;</span><br><span class="line"><span class="keyword">for</span> (var i = start; i &lt; this.length; i++) &#123;</span><br><span class="line">newarr.myPush(this[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments[0]&lt;0)&#123;</span><br><span class="line"><span class="keyword">for</span> (var i = this.length+start; i &lt; this.length; i++) &#123;</span><br><span class="line">newarr.myPush(this[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arguments[1])&#123;</span><br><span class="line"><span class="keyword">if</span>(start&lt;0)&#123;</span><br><span class="line"><span class="built_in">return</span> []</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(end&lt;0)&#123;</span><br><span class="line"><span class="keyword">for</span> (var i = start; i &lt; this.length+end; i++) &#123;</span><br><span class="line">newarr.myPush(this[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (var i = start; i &lt; end; i++) &#123;</span><br><span class="line">newarr.myPush(this[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> newarr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组方法slice的封装&quot;&gt;&lt;a href=&quot;#数组方法slice的封装&quot; class=&quot;headerlink&quot; title=&quot;数组方法slice的封装&quot;&gt;&lt;/a&gt;数组方法slice的封装&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两种盒子模型</title>
    <link href="http://yoursite.com/2018/07/05/%E4%B8%A4%E7%A7%8D%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/07/05/两种盒子模型/</id>
    <published>2018-07-05T02:44:37.000Z</published>
    <updated>2019-03-27T12:35:28.797Z</updated>
    
    <content type="html"><![CDATA[<p>##两种盒子模型</p><p>盒子模型分为W3C盒子模型和IE盒子模型两种，这两种盒子模型有细微的差异，其中IE的盒子模型中内容(content)是内容(content)加上内边距(padding)以及边框(border)。</p><p>从下图可以清楚的看出<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20140725102923126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3pxbmxz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="两种盒子模型" title>                </div>                <div class="image-caption">两种盒子模型</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##两种盒子模型&lt;/p&gt;
&lt;p&gt;盒子模型分为W3C盒子模型和IE盒子模型两种，这两种盒子模型有细微的差异，其中IE的盒子模型中内容(content)是内容(content)加上内边距(padding)以及边框(border)。&lt;/p&gt;
&lt;p&gt;从下图可以清楚的看出&lt;br&gt;&lt;f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactPrinciple</title>
    <link href="http://yoursite.com/2018/06/13/ReactPrinciple/"/>
    <id>http://yoursite.com/2018/06/13/ReactPrinciple/</id>
    <published>2018-06-13T07:23:14.000Z</published>
    <updated>2019-03-21T07:59:32.073Z</updated>
    
    <content type="html"><![CDATA[<p>##React的底层原理</p><font color="red">React 核心技术 —— 虚拟DOM（Virtual DOM）</font><p>在前端开发的过程中，我们经常会做的一件事就是将变化的数据实时更新到UI上，这时就需要对DOM进行更新和重新渲染，而频繁的DOM操作通常是性能瓶颈产生的原因之一，有时候我们会遇到这样一种尴尬的情况：比如有一个列表数据，当用户执行刷新操作时，Ajax会重新从后台请求数据，即使新请求的数据和上次完全相同，DOM也会被全部更新一遍并进行重新渲染，这样就产生了不必要的性能开销。</p><p>React为此引入了虚拟DOM（Virtual DOM）机制：对于每一个组件，React会在内存中构建一个相对应的DOM树，基于React开发时所有的DOM构造都是通过虚拟DOM进行，每当组件的状态发生变化时，React都会重新构建整个DOM数据，然后将当前的整个DOM树和上一次的DOM树进行对比，得出DOM结构变化的部分(Patchs)，然后将这些Patchs 再更新到真实DOM中。整个过程都是在内存中进行，因此是非常高效的。借用一张图可以清晰的表示虚拟DOM的工作机制：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://seo-1255598498.file.myqcloud.com/full/303368f0933da6f35f33151db7dfa28e07ee34cb.jpg" alt="React1" title>                </div>                <div class="image-caption">React1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##React的底层原理&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;React 核心技术 —— 虚拟DOM（Virtual DOM）&lt;/font&gt;

&lt;p&gt;在前端开发的过程中，我们经常会做的一件事就是将变化的数据实时更新到UI上，这时就需要对DOM进行更新和重新渲染，而频
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>清除浮动</title>
    <link href="http://yoursite.com/2018/04/05/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/04/05/清除浮动/</id>
    <published>2018-04-05T02:25:35.000Z</published>
    <updated>2019-03-21T07:59:34.226Z</updated>
    
    <content type="html"><![CDATA[<p>##自己总结的清除浮动的几种方式</p><font color="red">1.父级div定义伪类：after和zoom</font><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">  </span><br><span class="line">   /*清除浮动代码*/</span><br><span class="line">   .clearfloat:after&#123;display:block;clear:both;content:<span class="string">""</span>;visibility:hidden;height:0&#125;</span><br><span class="line">   .clearfloat&#123;zoom:1&#125;</span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1 clearfloat"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）缺点：代码多，不少初学者不理解原理，要两句代码结合使用，才能让主流浏览器都支持建议：推荐使用，建议定义公共类，以减少CSS代码</code></pre><font color="red">2.在结尾处添加空div标签clear:both</font><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   </span><br><span class="line">   /*清除浮动代码*/</span><br><span class="line">   .clearfloat&#123;clear:both&#125;</span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"clearfloat"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度优点：简单，代码少，浏览器支持好，不容易出现怪问题缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不爽建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法</code></pre><font color="red">3.父级div定义height</font><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;/*解决代码*/height:200px;&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">  &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt; </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题优点：简单，代码少，容易掌握缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题建议：不推荐使用，只建议高度固定的布局时使用</code></pre><font color="red">4.父级div定义overflow:hidden</font><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;/*解决代码*/width:98%;overflow:hidden&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;margin-top:10px;width:98%&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度优点：简单，代码少，浏览器支持好缺点：不能和position配合使用，因为超出的尺寸的会被隐藏建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用</code></pre><font color="red">5.父级div定义overflow:auto</font>    <pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;/*解决代码*/width:98%;overflow:auto&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;margin-top:10px;width:98%&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度优点：简单，代码少，浏览器支持好缺点：内部宽高超过父级div时，会出现滚动条。建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</code></pre><font color="red">6.父级div也一起浮动</font>    <pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;/*解决代码*/width:98%;margin-bottom:10px;float:left&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;width:98%;/*解决代码*/clear:both&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：所有代码一起浮动，就变成了一个整体优点：没有优点缺点：会产生新的浮动问题。建议：不推荐使用，只作了解。</code></pre><font color="red">7.父级div定义display:table</font>    <pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;/*解决代码*/width:98%;display:table;margin-bottom:10px;&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px;width:98%;&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：将div属性变成表格优点：没有优点缺点：会产生新的未知问题建议：不推荐使用，只作了解</code></pre><font color="red">8.结尾处加br标签clear:both</font>    <pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt; </span><br><span class="line">   .div1&#123;background:<span class="comment">#000080;border:1px solid red;margin-bottom:10px;zoom:1&#125;</span></span><br><span class="line">   .div2&#123;background:<span class="comment">#800080;border:1px solid red;height:100px&#125;</span></span><br><span class="line">   </span><br><span class="line">   .left&#123;<span class="built_in">float</span>:left;width:20%;height:200px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   .right&#123;<span class="built_in">float</span>:right;width:30%;height:80px;background:<span class="comment">#DDD&#125;</span></span><br><span class="line">   </span><br><span class="line">   .clearfloat&#123;clear:both&#125;</span><br><span class="line">   &lt;/style&gt; </span><br><span class="line">&lt;div class=<span class="string">"div1"</span>&gt; </span><br><span class="line">&lt;div class=<span class="string">"left"</span>&gt;Left&lt;/div&gt; </span><br><span class="line">&lt;div class=<span class="string">"right"</span>&gt;Right&lt;/div&gt;</span><br><span class="line">&lt;br class=<span class="string">"clearfloat"</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=<span class="string">"div2"</span>&gt;</span><br><span class="line">   div2</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>原理：父级div定义zoom:1来解决IE浮动问题，结尾处加br标签clear:both建议：不推荐使用，只作了解</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##自己总结的清除浮动的几种方式&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;1.父级div定义伪类：after和zoom&lt;/font&gt;

&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VuePrinciple</title>
    <link href="http://yoursite.com/2018/03/20/VuePrinciple/"/>
    <id>http://yoursite.com/2018/03/20/VuePrinciple/</id>
    <published>2018-03-20T02:37:52.000Z</published>
    <updated>2019-03-20T08:32:20.519Z</updated>
    
    <content type="html"><![CDATA[<p>##Vue的底层原理<br><a id="more"></a><br>VUE实现数据双向绑定的效果，需要三大模块<br>1、Observer：能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</p><p>2、Compile：对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</p><p>3、Watcher：作为链接Observer和Compile的桥梁，能够订阅并受到每个属性变动的通知，并执行指令绑定的相应回掉函数，从而更新视图</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Vue的底层原理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="http://yoursite.com/2018/03/15/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/03/15/Vue生命周期/</id>
    <published>2018-03-15T08:17:04.000Z</published>
    <updated>2019-03-30T09:18:27.888Z</updated>
    
    <content type="html"><![CDATA[<p>##Vue生命周期<br>    1.beforeCreate 组件创建前<br>        没有$el、$data、以及data里面的属性<br>    2.created 组件创建后<br>        没有$el，$data以及data里面的属性被初始化，<br>    3.beforeMount 组件挂载前<br>        $el、$data以及data里面的值被初始化<br>    4.Mounted 组件挂载后<br>        $el、$data以及data里面的值被初始化，通常都是在这个钩子函数中请求后台数据(非事件调用)<br>    5.beforeUpdate 组件更新前<br>        在这一步，页面中显示的数据是之前的，但是data里面的数据是最新的<br>    6.update 组件更新后<br>        这一步中，页面已经和data里面的数据同步了<br>    7.beforeDestroy 组件销毁前<br>        在这一步，实例还可以被调用<br>    8.destroyed 组件销毁后<br>        这一步Vue实例指示的东西完全解绑，所有的事件监听也完全被移除，所有的子实例也会被销毁</p><pre><code>在created和beforeMount这两个生命周期中间会判断有没有$el对象，如果有就向下执行，没有的话就停止执行，直到调用vm.$mount(el)beforeUptate执行完成之后会在内存中重新渲染一个最新的DOM树，再重新渲染到页面当中，这一步就完成了从data层到view层的更新</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Vue生命周期&lt;br&gt;    1.beforeCreate 组件创建前&lt;br&gt;        没有$el、$data、以及data里面的属性&lt;br&gt;    2.created 组件创建后&lt;br&gt;        没有$el，$data以及data里面的属性被初始化，&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ajax优缺点</title>
    <link href="http://yoursite.com/2018/01/15/Ajax%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://yoursite.com/2018/01/15/Ajax优缺点/</id>
    <published>2018-01-15T13:08:22.000Z</published>
    <updated>2019-03-27T12:35:40.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax优缺点"><a href="#Ajax优缺点" class="headerlink" title="Ajax优缺点"></a>Ajax优缺点</h2><pre><code>Ajax工作原理：    相当于在客户端与服务端之间加了一个抽象层(Ajax引擎)，使用户请求和服务器响应异步化，并不是所有的请求都提交给服务器，像一些数据验证和数据处理    都交给Ajax引擎来完成，只有确认需要向服务器读取新数据时才右Ajax引擎向服务器提交请求。Ajax优缺点：        优点：        1.无刷新更新数据        Ajax最大的优点就是能在不刷新整个页面的情况下维持与服务器通信        2.异步与服务器通信        使用异步的方式与服务器通信，不打断用户的操作        3.前端与后端负载均衡        将一些后端的工作移到前端，减少服务器与带宽的负担        4.基于规范被广泛支持        不需要下载浏览器插件或者小程序，但需要客户允许JavaScript在浏览器上执行。        5.界面与应用分离        Ajax使得界面与应用分离，也就是数据与呈现分离。        缺点：        1.Ajax干掉了Back与History功能，即对浏览器机制的破坏        在动态更新页面的情况下，用户无法回到前一页的页面状态，因为浏览器仅能记忆历史纪录中的静态页面        2.安全问题        AJAX技术给用户带来很好的用户体验的同时也对IT企业带来了新的安全威胁，Ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。        3.对搜索引擎支持较弱        4.破坏程序的异常处理机制        5.违背URL与资源定位的初衷        6.不能很好地支持移动设备        7.客户端肥大，太多客户段代码造成开发上的成本    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ajax优缺点&quot;&gt;&lt;a href=&quot;#Ajax优缺点&quot; class=&quot;headerlink&quot; title=&quot;Ajax优缺点&quot;&gt;&lt;/a&gt;Ajax优缺点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Ajax工作原理：
    相当于在客户端与服务端之间加了一个抽象层(Ajax引擎)
      
    
    </summary>
    
    
  </entry>
  
</feed>
